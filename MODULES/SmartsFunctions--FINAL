#!/bin/bash
#
# This File contains all of the Function Modules for the automation of SMARTS functions.
# Created 2/29/2020 Tjs.
#


function Log_Out_Put_1() {
#
# Step 10 - This is just a simple banner to show what step we are in.
#
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> ${MYLOG} 2>&1
 echo "@@@  STEP 10 This is automation for the last discovered GT 2 Day List!  @@@" >> ${MYLOG} 2>&1
 echo "The Current Bash version ${BASH_VERSION}..." | tee -a ${MYLOG}
 echo "                 `date` " >> ${MYLOG} 2>&1
 echo "                 Running Function #:  """$RunningFunc"""       " >> ${MYLOG} 2>&1
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> ${MYLOG} 2>&1

echo "SCRIPT_PATH = " $SCRIPT_PATH | tee -a ${MYLOG}
echo "MYLOG       = " $MYLOG | tee -a ${MYLOG}
echo "MYtmpLOG    = " $MYtmpLOG | tee -a ${MYLOG}
echo "My_ARL_DOMS = " $My_ARL_DOMS | tee -a ${MYLOG}
echo "My_RES_DOMS = " $My_RES_DOMS | tee -a ${MYLOG}
echo "My_Known_Comm_Strgs = " $My_Known_Comm_Strgs | tee -a ${MYLOG}
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> ${MYLOG} 2>&1
}


function Log_Out_Put_2() {
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a ${MYLOG}
 echo "                       `date` " | tee -a ${MYLOG}
 echo "Bash version ${BASH_VERSION}..." | tee -a ${MYLOG}
 echo "" | tee -a ${MYLOG}
 echo "STAGE 1: STEP 10 This is just a simple banner to place in the log File!" | tee -a ${MYLOG}
 echo "" | tee -a ${MYLOG}
 echo "                 Running Function #:  """$RunningFunc"""       " | tee -a ${MYLOG}
 echo "" | tee -a ${MYLOG}
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a ${MYLOG}
 echo "" | tee -a ${MYLOG}
 echo "SCRIPT_PATH = " $SCRIPT_PATH | tee -a ${MYLOG}
 echo "MYLOG   =     " $MYLOG | tee -a ${MYLOG}
 echo "MYtmpLOG    = " $MYtmpLOG | tee -a ${MYLOG}
 echo "My_ARL_DOMS = " $My_ARL_DOMS | tee -a ${MYLOG}
 echo "My_RES_DOMS = " $My_RES_DOMS | tee -a ${MYLOG}
 echo "My_Known_Comm_Strgs = " $My_Known_Comm_Strgs | tee -a ${MYLOG}
 echo "" | tee -a ${MYLOG}
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a ${MYLOG}

#
# Stage 1:  Step 10 - This step ....
#
}

function Log_Out_Put_3() {
#
# Step 10 - This is just a simple banner to show what step we are in.
#
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a "${MYLOG}" 2>&1
 echo "@@@  STEP 10 This is automation for the last discovered GT 2 Day List!  @@@" | tee -a "${MYLOG}" 2>&1
 echo "The Current Bash version ${BASH_VERSION}..." | tee -a "${MYLOG}"
 #    echo "                 $(date) " >> "${MYLOG}" 2>&1
 echo "                 $(date) " | tee -a "${MYLOG}" 2>&1
 echo "                 Running Function #:  """"$RunningFunc""""       " | tee -a "${MYLOG}" 2>&1
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a "${MYLOG}" 2>&1
 echo "SCRIPT_PATH     = " "$SCRIPT_PATH" | tee -a "${MYLOG}"
 echo "MYLOG           = " "$MYLOG" | tee -a "${MYLOG}"
 echo "MYtmpINPUT_1    = " "$MYtmpINPUT_1"   | tee -a "${MYLOG}"
 echo "MYTmpOUTPUT_1   = " "$MYTmpOUTPUT_1"  | tee -a "${MYLOG}"
 echo "MYTmpOUTPUT_2   = " "$MyTmpOUTPUT_2"  | tee -a "${MYLOG}"
 echo "MYTmpOUTPUT_3   = " "$MyTmpOUTPUT_3"  | tee -a "${MYLOG}"
 echo "MyCleanup_1     = " "$MyCleanup_1"    | tee -a "${MYLOG}"
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> "${MYLOG}" 2>&1
}


function Log_Out_Put_4() {
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a "${MYLOG}"
 echo "                       $(date) " | tee -a "${MYLOG}"
 echo "Bash version ${BASH_VERSION}..." | tee -a "${MYLOG}"
 echo "" | tee -a "${MYLOG}"
 echo "STAGE 1: STEP 10 This is just a simple banner to place in the log File!" | tee -a "${MYLOG}"
 echo "" | tee -a "${MYLOG}"
 echo "                 Running Function #:  """"$RunningFunc""""       " | tee -a "${MYLOG}"
 echo "" | tee -a "${MYLOG}"
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a "${MYLOG}"
 echo "" | tee -a "${MYLOG}"
 echo "SCRIPT_PATH = " "$SCRIPT_PATH" | tee -a "${MYLOG}"
 echo "MYLOG   =     " "$MYLOG" | tee -a "${MYLOG}"
 echo "MYtmpLOG    = " "$MYtmpLOG" | tee -a "${MYLOG}"
 echo "My_ARL_DOMS = " "$My_ARL_DOMS" | tee -a "${MYLOG}"
 echo "My_RES_DOMS = " "$My_RES_DOMS" | tee -a "${MYLOG}"
 echo "My_Known_Comm_Strgs = " "$My_Known_Comm_Strgs" | tee -a "${MYLOG}"
 echo "" | tee -a "${MYLOG}"
 echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a "${MYLOG}"

#
# Stage 1:  Step 10 - This step ....
#
}


function MyIpVerification(){
echo '===============================================' | tee -a "${MYLOG}"
echo 'You have entered an IP address parameter' | tee -a "${MYLOG}"
echo 'The current CIPAdd = '$CIPAdd | tee -a "${MYLOG}"
echo '===============================================' | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
}

function CommunityBanner() {
echo '=================================================' | tee -a "${MYLOG}"
echo '=== BEGINNING TEST OF KNOWN COMMUNITY STRINGS === ' | tee -a "${MYLOG}"
echo "Community String = $Input_1" | tee -a "${MYLOG}"
echo '=================================================' | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
}

function OIDCallBanner() {
echo '=================================================' | tee -a "${MYLOG}"
echo '=== BEGINNING TEST OF SYSNAME OID            === ' | tee -a "${MYLOG}"
echo "Object ID = $MyOID_Call" | tee -a "${MYLOG}"
echo '=================================================' | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
}

function LastDisco2DayListing() {
echo '=================================================' | tee -a "${MYLOG}"
echo '=== BEGINNING OUTPUT FOR THE 2 DAY LIST      === ' | tee -a "${MYLOG}"
echo '@@@ THE FOLLOWING DEVICES WERE FOUND IN THE  @@@@' | tee -a "${MYLOG}"
echo '@@@          CURRENT 2 DAY LISTING:          @@@@' | tee -a "${MYLOG}"
echo '=================================================' | tee -a "${MYLOG}"
cat "${MYTmpOUTPUT_1}" | tee -a "$MYLOG"
echo '=================================================' | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
#  echo "" | tee -a "${MYLOG}"
# added a 7 second pause so the operator can read the output.
sleep $MYINT_7
}


# NOTE:  This banner is for inside the loop and output is directed to that temp output file.
# NOTE: I removed the -a append to this file for the lead in of the banner to be sure to clear the file.
function LastDisco2DayBanner() {
echo '=================================================' | tee -a "${MYLOG}"
echo '=== BEGINNING OUTPUT FOR THE 2 DAY LIST      === ' | tee -a "${MYLOG}"
echo "CURRENT DEVICE BEING INTEROGATED = "$Input_1" " | tee -a "${MYLOG}"
echo '=================================================' | tee -a "${MYLOG}"
echo "EXECUTING: sml -d " "${Input_1}" "-v" | tee -a "${MYLOG}"
echo '=================================================' | tee -a "${MYLOG}"
#   echo "" | tee -a "${MYLOG}"
#   echo "" | tee -a "${MYLOG}"
sleep $MYINT_3
}

function LastDisco2DaySuspects(){
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MyTmpOUTPUT_3}"
echo '@@@@@@@@  LISTING OF DEVICES THAT HAVE NO ALARMS @@@@@@@'  | tee -a "${MyTmpOUTPUT_3}"
echo '@@@@@@@@  NO Active alarms FOUND - SUSPECTS      @@@@@@@'  | tee -a "${MyTmpOUTPUT_3}"
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MyTmpOUTPUT_3}"
echo "" | tee -a "${MyTmpOUTPUT_3}"
echo "" | tee -a "${MyTmpOUTPUT_3}"
}

function AutoMate_Banner() {
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
echo '@@@@@@@@@@@     ' "${MyBanner_Input_1}" | tee -a "${MYLOG}"
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
}

function AutoMateEOP_Banner() {
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
echo '@@@@@@@@@@@     END OF AUTOMATION     @@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
echo "" | tee -a "${MYLOG}"
}

function TwoDayChkrEOP_Banner() {
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' >> "${MyTmpOUTPUT_3}"
echo '@@@@@@@@@@@     END OF AUTOMATION     @@@@@@@@@@@@@@@' >> "${MyTmpOUTPUT_3}"
echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' >> "${MyTmpOUTPUT_3}"
}

function TwoDayLoop_1() {
# Opening up the Suspects file:
LastDisco2DaySuspects
# parsing out just the device names from the 2 Day Listing:
grep AMPM $MYtmpINPUT_1 | cut -d , -f1 > $MYTmpOUTPUT_1
# I don't believe this is needed anywhere.  Commenting this out for now. 
##### Input_File_1=$MYTmpOUTPUT_1
# Head Banner for ths 2DayList.
Log_Out_Put_3
# Header function to list out all devices to be tested from the 2DayList.
LastDisco2DayListing
# This is the start of the loop:
for Input_1 in `awk -F: '{print $1}' "$MYTmpOUTPUT_1"`
do
LastDisco2DayBanner
#####     sm_perl /opt/sbin/smarts_lookup.pl -d "${Input_1}" "-v" | tee -a "${MYLOG}"
sm_perl /opt/sbin/smarts_lookup.pl -d "${Input_1}" "-v" > "${MyTmpOUTPUT_2}"
# taking in the output from the sml command above and looking for 'Active alarms '..
TwoDayChkr

done
# End of the loop and running cleanup of temp files:
rm $MyCleanup_1
AutoMateEOP_Banner
TwoDayChkrEOP_Banner
}

function TwoDayChkr() {
# testing for Active alarms and splitting output based on results.
####   MyTmpOUTPUT_2=$TEMP_PATH/Results_Dev_Chkr_2day-"""$CURDATE""".log
if grep -E "Active alarms " "${MyTmpOUTPUT_2}"
   then
	echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
	echo '@@@  Active Alarms found for '  "${Input_1}"   | tee -a "${MYLOG}"
	echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
	echo "" | tee -a "${MYLOG}"
     cat "${MyTmpOUTPUT_2}" | tee -a "${MYLOG}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
        echo '@@@  Active Alarms found for '  "${Input_1}"   | tee -a "${MYLOG}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
	echo "" | tee -a "${MYLOG}"
   else
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
        echo '@@@@@@@@  NO Active alarms FOUND - SUSPECT    @@@@@@@'  | tee -a "${MYLOG}"
        echo '@@@  Active Alarms NOT found for '  "${Input_1}"   | tee -a "${MYLOG}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
        echo "" | tee -a "${MYLOG}"
     cat "$MyTmpOUTPUT_2" | tee -a "${MYLOG}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
        echo '@@@@@@@@  NO Active alarms FOUND - SUSPECT    @@@@@@@'  | tee -a "${MYLOG}"
        echo '@@@  Active Alarms NOT found for '  "${Input_1}"   | tee -a "${MYLOG}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' | tee -a "${MYLOG}"
        echo "" | tee -a "${MYLOG}"
# ----------------------------------------------------------------------------------------
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' >> "${MyTmpOUTPUT_3}"
        echo '@@@@@@@@  NO Active alarms FOUND - SUSPECT    @@@@@@@' >> "${MyTmpOUTPUT_3}"
        echo '@@@  Active Alarms NOT found for '  "${Input_1}"       >> "${MyTmpOUTPUT_3}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' >> "${MyTmpOUTPUT_3}"
        echo ""                                                      >> "${MyTmpOUTPUT_3}"
     cat "$MyTmpOUTPUT_2"                                            >> "${MyTmpOUTPUT_3}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' >> "${MyTmpOUTPUT_3}"
        echo '@@@@@@@@  NO Active alarms FOUND - SUSPECT    @@@@@@@' >> "${MyTmpOUTPUT_3}"
        echo '@@@  Active Alarms NOT found for '  "${Input_1}"       >> "${MyTmpOUTPUT_3}"
        echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' >> "${MyTmpOUTPUT_3}"
        echo "" >> "${MyTmpOUTPUT_3}"
   fi
####     rm "${MYTmpOUTPUT_2}"
}

function TESTING_2DayChkr_1() {
# testing for Active alarms and splitting output based on results.
MyTmpOUTPUT_2=$TEMP_PATH/Results_Dev_Chkr_2day-"""$CURDATE""".log
if egrep "Active alarms " $MYtmpOUTPUT_1 > "${MyTmpOUTPUT_2}" 2>&1
then
echo "FOUND YOU!!!" | tee -a "${MYLOG}"
else
echo "MISSED YOU!!!" | tee -a "${MYLOG}"
fi
sleep $MYINT_3
cat ${MYtmpLOG} | tee -a "${MYLOG}"
rm "${MYtmpLOG}"

}

function TESTING_2DayChkr_2() {
# Logging for this function.
### NOTE:::  This is for testing ONLY This should be removed.
MyLogFileName=TESTScript-"""$CURDATE""".log
MyTmpOUTPUT=Last_Disco_2day-"""$CURDATE""".log
MYLOG=$SCRIPT_PATH/LOGS/"""$MyLogFileName"""
MY_LOG_INPUT_1=$SCRIPT_PATH/LOGS/2DayListing-20200324133216.log2
TemporaryLog=TempScript-"""$CURDATE""".log
MYtmpLOG=$TEMP_PATH/"""$TemporaryLog"""
MYINT_1=1
MYINT_3=3
MYINT_5=5
# Tsting code:
# This is to see if I will find Active Alarms:
# Didn't work-- if grep -Fxq $MY_LOG_INPUT_1 "Active alarms "
if egrep "Active alarms " $MY_LOG_INPUT_1 > "${MYtmpLOG}" 2>&1
then
echo "FOUND YOU!!!" | tee -a "${MYLOG}"
else
echo "MISSED YOU!!!" | tee -a "${MYLOG}"
fi
sleep $MYINT_3
cat ${MYtmpLOG} | tee -a "${MYLOG}"
rm "${MYtmpLOG}"

}


function MySymLinker() {
#  BELOW IS THE CODE THAT WAS USED TO POPULATE THIS DIRECTORY WITH THE LINKS:
#  =========================================================================================================
echo $DomainName
ln -s /data/InCharge95/"""$DomainName"""/local/logs/"""$DomainName"""_en_US_UTF-8.log """$DomainName"""_en_US_UTF-8.log
lsa /data/InCharge95/"""$DomainName"""/local/logs/"""$DomainName"""_en_US_UTF-8.log
}


function LOGICSNMPgetLoop_2() {
# Logging for this function:
MyLogFileName=SNMPgetChkr_v2-"""$CURDATE""".log
TemporaryLog=TempScript-"""$CURDATE""".log
MYtmpLOG=$TEMP_PATH/"""$TemporaryLog"""
MYLOG=$SCRIPT_PATH/LOGS/"""$MyLogFileName"""

# Head Banner for ths 2DayList.
Log_Out_Put_1
# Loop checking each Known Community String against a device.

for Input_1 in `awk -F: '{print $1}' "$Input_File_1"`
do

 CommunityBanner
 MyIpVerification
 OIDCallBanner

# echo "1--snmpget -v 2c -c" "$Input_1" | tee -a "${MYLOG}"
# echo "2--snmpget -v 2c -c" "${Input_1}" "${CIPAdd}" | tee -a "${MYLOG}"
# echo "3--snmpget -v 2c -c" "$Input_1" ${CIPAdd} ${MyOID_Call} | tee -a "${MYLOG}"

snmpget -v 2c -c "${Input_1}" ${CIPAdd} ${MyOID_Call}  >> "${MYtmpLOG}" 2>&1
cat "${MYtmpLOG}" | tee -a "$MYLOG"
If 


rm "${MYtmpLOG}"
done
AutoMateEOP_Banner

}


function MySnmpGetChkr() {
#
# This is the function to test Known Commnity strings against a device.
#
echo "" | tee -a ${MYLOG}
date >> ${MYLOG}
echo "TESTING snmpget -v 2c -c """$CSNMPkey""" " | tee -a ${MYLOG}
echo '=================================================' | tee -a ${MYLOG}
snmpget -v 2c -c """$CSNMPkey""" """$CIPAdd""" sysName.0 >> ${MYLOG} 2>&1
}


function My_While_Options() {
while getopts 'lha:' OPTION; do
  case "$OPTION" in
    l)
      echo "linuxconfig"
      ;;

    h)
      echo "h stands for h"
      ;;

    a)
      avalue="$OPTARG"
      echo "The value provided is $OPTARG"
      ;;
    ?)
      echo "script usage: $(basename $0) [-l] [-h] [-a somevalue]" >&2
      exit 1
      ;;
  esac
done
shift "$(($OPTIND -1))"
}


##  This is a working as of 2020-03-30:
#
#
function SNMPgetLoop_2() {
# Logging for this function:
MyLogFileName=SNMPgetChkr-"""$CURDATE""".log
TemporaryLog=TempScript-"""$CURDATE""".log
MYtmpLOG=$TEMP_PATH/"""$TemporaryLog"""
MYLOG=$SCRIPT_PATH/LOGS/"""$MyLogFileName"""

# Head Banner for ths 2DayList.
Log_Out_Put_1
# Loop checking each Known Community String against a device.

for Input_1 in `awk -F: '{print $1}' "$Input_File_1"`
do

 CommunityBanner
 MyIpVerification
 OIDCallBanner

echo "OUTPUT OF TEST--snmpget -v 2c -c" "$Input_1" ${CIPAdd} ${MyOID_Call} >> "${MYtmpLOG}"
snmpget -v 2c -c "${Input_1}" ${CIPAdd} ${MyOID_Call}  >> "${MYtmpLOG}" 2>&1
cat "${MYtmpLOG}" | tee -a "$MYLOG"
rm "${MYtmpLOG}"
done
AutoMateEOP_Banner

}



##  This one works as of 2020-03-30:
#  I am now working on the TwoDayLoop_1
# to add checks and logic into the loop.
#
#
function TwoDayLoop_2() {
MYtmpINPUT_1=$TEMP_PATH/last_discovery_gt_2days_rpt_`date +%Y%m%d`*
MYTmpOUTPUT_1=$TEMP_PATH/Dev_Chkr_2day-"""$CURDATE""".log
grep AMPM $MYtmpINPUT_1 | cut -d , -f1 > $MYTmpOUTPUT_1
Input_File_1=$MYTmpOUTPUT_1
Log_Out_Put_3
LastDisco2DayListing
for Input_1 in `awk -F: '{print $1}' "$MYTmpOUTPUT_1"`
do
LastDisco2DayBanner
sleep $MYINT_3
sm_perl /opt/sbin/smarts_lookup.pl -d "${Input_1}" "-v" | tee -a "${MYLOG}"
done
rm "${MYTmpOUTPUT_1}"
AutoMateEOP_Banner
}


function ARL_LD_GT_2Day_FULL-Mail() {
mail -s "ARL LD_GT 2 Day FULL Listing_${SHRTDATE}" -a $MYLOG nmssmarts@one.verizon.com << EOF
Attached please find todays ARL Last Discovery GT 2 Day FULL LISTING.
EOF
}

function ARL_LD_GT_2Day_Suspects-Mail() {
mail -s "ARL LD_GT 2 Day Suspects_${SHRTDATE}" -a $MyTmpOUTPUT_3 nmssmarts@one.verizon.com << EOF
Attached please find todays ARL Last Discovery GT 2 Day SUSPECTS report.
EOF
}

function RES_LD_GT_2Day_FULL-Mail() {
mail -s "RES LD_GT 2 Day FULL Listing_${SHRTDATE}" -a $MYLOG nmssmarts@one.verizon.com << EOF
Attached please find todays RES Last Discovery GT 2 Day FULL LISTING.
EOF
}

function RES_LD_GT_2Day_Suspects-Mail() {
mail -s "RES LD_GT 2 Day Suspects_${SHRTDATE}" -a $MyTmpOUTPUT_3 nmssmarts@one.verizon.com << EOF
Attached please find todays RES Last Discovery GT 2 Day SUSPECTS report.
EOF
}

function MAIL_ERROR_FUNC-Mail() {
mail -s "ERROR OCCRED WITH MAIL FUNCTION_ ${SHRTDATE} " -a $MyTmpOUTPUT_3 nmssmarts@one.verizon.com << EOF
Attached please find todays RES Last Discovery GT 2 Day SUSPECTS report.
EOF
}
